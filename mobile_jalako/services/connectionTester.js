import { Platform } from 'react-native';

// URLs √† tester pour Android
const ANDROID_URLS = [
  'http://192.168.1.28:8081/api',  // Serveur backend actuel
  'http://10.0.2.2:8081/api',       // √âmulateur Android standard
  'http://localhost:8081/api',       // Alternative locale
  'http://127.0.0.1:8081/api',      // Alternative locale
];

// URLs √† tester pour iOS
const IOS_URLS = [
  'http://192.168.1.28:8081/api',  // Serveur backend actuel
  'http://localhost:8081/api',       // Port 8081
  'http://127.0.0.1:8081/api',      // Port 8081
];

// Test de connectivit√© pour une URL donn√©e
const testUrl = async (url, timeout = 5000) => {
  try {
    console.log(`üîç Test de connectivit√©: ${url}`);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    
    const response = await fetch(`${url}/health`, {
      method: 'GET',
      signal: controller.signal,
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    clearTimeout(timeoutId);
    
    if (response.ok) {
      console.log(`‚úÖ URL fonctionnelle: ${url}`);
      return { success: true, url, status: response.status };
    } else {
      console.log(`‚ö†Ô∏è URL r√©pond mais erreur: ${url} (${response.status})`);
      return { success: false, url, status: response.status, error: 'HTTP_ERROR' };
    }
  } catch (error) {
    console.log(`‚ùå URL √©chou√©e: ${url} - ${error.message}`);
    return { 
      success: false, 
      url, 
      error: error.message,
      code: error.code || 'UNKNOWN'
    };
  }
};

// Test de toutes les URLs disponibles
export const testAllUrls = async () => {
  console.log('üöÄ D√©marrage du test de connectivit√©...');
  console.log(`üì± Plateforme: ${Platform.OS}`);
  
  const urlsToTest = Platform.OS === 'android' ? ANDROID_URLS : IOS_URLS;
  const results = [];
  
  for (const url of urlsToTest) {
    const result = await testUrl(url);
    results.push(result);
    
    // Si on trouve une URL qui fonctionne, on peut s'arr√™ter
    if (result.success) {
      console.log(`üéâ URL fonctionnelle trouv√©e: ${url}`);
      break;
    }
  }
  
  const workingUrl = results.find(r => r.success);
  
  if (workingUrl) {
    console.log(`‚úÖ Connectivit√© r√©ussie avec: ${workingUrl.url}`);
    return {
      success: true,
      workingUrl: workingUrl.url,
      allResults: results
    };
  } else {
    console.log('‚ùå Aucune URL fonctionnelle trouv√©e');
    return {
      success: false,
      allResults: results,
      suggestions: [
        'V√©rifiez que le serveur backend est d√©marr√© sur le port 8081',
        'V√©rifiez que le port 8081 est ouvert',
        'Essayez de red√©marrer l\'√©mulateur',
        'V√©rifiez votre configuration r√©seau'
      ]
    };
  }
};

// Obtenir l'IP locale de la machine
export const getLocalIP = async () => {
  try {
    // Cette m√©thode ne fonctionne que sur certaines plateformes
    const response = await fetch('https://api.ipify.org?format=json');
    const data = await response.json();
    return data.ip;
  } catch (error) {
    console.log('‚ùå Impossible d\'obtenir l\'IP locale:', error.message);
    return null;
  }
};

// Test rapide de connectivit√©
export const quickConnectivityTest = async () => {
  console.log('‚ö° Test rapide de connectivit√©...');
  
  const baseUrl = 'http://192.168.1.28:8081/api';
  
  try {
    const response = await fetch(`${baseUrl}/health`, {
      method: 'GET',
      timeout: 3000,
    });
    
    if (response.ok) {
      console.log('‚úÖ Connectivit√© rapide r√©ussie');
      return { success: true, url: baseUrl };
    } else {
      console.log('‚ö†Ô∏è Connectivit√© rapide √©chou√©e:', response.status);
      return { success: false, error: `HTTP ${response.status}` };
    }
  } catch (error) {
    console.log('‚ùå Connectivit√© rapide √©chou√©e:', error.message);
    return { success: false, error: error.message };
  }
};
